Descripcion:
Esta practica consiste en recibir paquetes por medio de UDP y mostrar el resultado en una pantalla LCD.

Integrantes:
Oscar Palma
Christian Hernandez
Mario Espinoza

Codigo:



#include <SPI.h>         // needed for Arduino versions later than 0018
#include <Ethernet.h>
#include <EthernetUdp.h> // UDP library from: bjoern@cs.stanford.edu 12/30/2008
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);

// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = {  
  0x00, 0x25, 0x64, 0xA1, 0xD1, 0xF1 };
IPAddress ip(192, 168, 61, 20);

unsigned int localPort = 8888;      // local port to listen on

// buffers for receiving and sending data
char packetBuffer[UDP_TX_PACKET_MAX_SIZE]; //buffer to hold incoming packet,
char  ReplyBuffer[] = "acknowledged";       // a string to send back

// An EthernetUDP instance to let us send and receive packets over UDP
EthernetUDP Udp;

void setup() {
  // start the Ethernet and UDP:
  Ethernet.begin(mac,ip);
  Udp.begin(localPort);

  Serial.begin(9600);
  lcd.begin(20,4);
  lcd.setCursor(3,0); //Start at character 4 on line 0
  lcd.print("Esperando Paquete");
  delay(1000);
}

void loop() {
  // if there's data available, read a packet
  int packetSize = Udp.parsePacket();
  if(packetSize)
  {
    lcd.print("Received packet of size ");
    lcd.print(packetSize);
    lcd.print("From ");
    IPAddress remote = Udp.remoteIP();
    for (int i =0; i < 4; i++)
    {
      lcd.print(remote[i], DEC);
      if (i < 3)
      {
        lcd.write(".");
      }
    }
   lcd.write(", port ");
    lcd.write(Udp.remotePort());

    // read the packet into packetBufffer
    Udp.read(packetBuffer,UDP_TX_PACKET_MAX_SIZE);
    lcd.print("Contents:");
    lcd.write(packetBuffer);

    // send a reply, to the IP address and port that sent us the packet we received
    Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
    Udp.write(ReplyBuffer);
    Udp.endPacket();
  }
  delay(10);
}
